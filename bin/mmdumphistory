#!/usr/bin/env ruby

# This utility talks over a serial connection to a RileyLink that has been
# loaded with the subg_rfspy firmware (https://github.com/ps2/subg_rfspy)

# It attempts to wake the pump, and get history

# Must install the serialport gem to use this.

require 'minimed_rf'
require 'minimed_rf/serial'

if ARGV.length < 2 || ARGV[1].length != 6
  puts "Usage: mmlisten /dev/tty.usbserial-A9048LGG pumpserial"
  if ARGV[1].length != 6
    puts "Error: pumpserial should be a six character id, like '55AB12'"
  end
  exit -1
end

pump_serial = ARGV[1]

def print_packet(p)
  if p.nil?
    puts "Nil packet!"
  else
    puts "#{Time.now.strftime('%H:%M:%S.%3N')} #{"%3d" % p.rssi} (#{"%3d" % p.sequence}): #{p}"
    puts "raw: #{p.hex_data}"
  end
end

puts "Opening #{ARGV[0]}"
rl = MinimedRF::SerialRL.new(ARGV[0])
rl.sync

# Send 80 wake-up packets
rl.set_channel(0); rl.send_packet("a7" + pump_serial + "5d00", 80)
rl.set_channel(2); print_packet(rl.get_packet)
sleep(0.01)

# Get model
rl.set_channel(0); rl.send_packet("a7" + pump_serial + "8d00")
rl.set_channel(2); print_packet(rl.get_packet)
sleep(0.02)

# Get history page
rl.set_channel(0); rl.send_packet("a7" + pump_serial + "8000")
rl.set_channel(2); print_packet(rl.get_packet(20))
sleep(0.02)
rl.set_channel(0); rl.send_packet("a7" + pump_serial + "800100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
16.times do
  rl.set_channel(2); print_packet(rl.get_packet(20))
  sleep(0.02)
  rl.set_channel(0); rl.send_packet("a7" + pump_serial + "0600")
end


#   packet = rl.get_packet
#   if packet
#   end
# end
