#!/usr/bin/env ruby

begin
  require 'base64'
  require 'minimed_rf'
rescue LoadError
  require 'rubygems'
  require 'minimed_rf'
end

def handle_input(input)
  return if input.length < 6 || input[0] == "#"

  # remove spaces
  input = input.gsub(/\W/,'')

  # Look for second byte 00, which is inserted by RF Studio as length field?
  if input[2,2] == "00"
    input.slice!(2,2)
  end

  # try raw
  packet = MinimedRF::Packet.decode_from_radio(input)

  # try decoded
  if !packet.valid?
    packet = MinimedRF::Packet.from_hex(input)
  end
  puts packet.raw_hex_data
  puts packet.to_s
  #puts packet.crc
  #puts packet.computed_crc

  message = packet.to_message

  if message
    File.open("tmppacket.packetdiag", "w") do |f|
      f.print packet.packetdiag
    end
    `packetdiag -T svg tmppacket.packetdiag`

    mime_type    = "image/svg+xml"
    encoded_text = Base64.strict_encode64(File.open("tmppacket.svg").read)

    html = <<-ENDOFHTML
<html>
  <head>
  </head>
  <body>
    <img src="data:#{mime_type};base64,#{encoded_text}" style="position: absolute; max-width:100%;">
    <img src="https://rawgit.com/ps2/minimed_rf/master/docs/PumpStatus.svg" style="position:absolute;max-width:100%;">
  </body>
</html>
ENDOFHTML

    File.open("#{input}.html", "w") do |f|
      f.write(html)
    end
  end
end

if ARGV.length > 0
  handle_input(ARGV.first)
else
  while line = STDIN.gets
    handle_input(line.chomp)
  end
end
